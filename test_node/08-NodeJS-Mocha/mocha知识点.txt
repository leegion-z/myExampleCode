

1. 安装
	npm install --save-dev mocha

	在package.json
	"scripts": {
	    "test": "mocha"
	  }

	npm test test.js 

	Mocha默认运行test子目录里面的测试脚本。所以，一般都会把测试脚本放在test目录里面，然后执行mocha就不需要参数了,如果test里面有嵌套子目录， 需要加上mocha --recursive


2. 基本写法

	describe('加法函数的测试', function() {
	  it('1 加 1 应该等于 2', function() {
	    expect(add(1, 1)).to.be.equal(2);
	  });
	});

	(1)describe块称为"测试套件"（test suite），表示一组相关的测试。它是一个函数，第一个参数是测试套件的名称（"加法函数的测试"），第二个参数是一个实际执行的函数。
	(2)it块称为"测试用例"（test case），表示一个单独的测试，是测试的最小单位。它也是一个函数，第一个参数是测试用例的名称（"1 加 1 应该等于 2"），第二个参数是一个实际执行的函数。
	(3)context函数是describe函数的别名,describe 可以嵌套context


3. Mocha本身不带断言库，所以必须先引入断言库。chai --  http://chaijs.com/
chai：assert风格的断言
chai：should风格的断言
chai：expect风格的断言

如果断言不成立，就会抛出一个错误。事实上，只要不抛出错误，测试用例就算通过。


4. 异步测试的方法
mocha  --timeout 5000 设置超时时间
(1)  it('异步请求应该返回一个对象', function(done) {

        setTimeout(function(){
            var obj = {name:"kerwin"};
            expect(obj).to.be.an('object');

            done();
        },1000)
    });
(2)Mocha内置对Promise的支持
it('异步请求应该返回一个对象', function() {
  return axios.get('https://api.github.com')
    .then(function(json) {
      expect(json).to.be.an('object');
    });
});




