#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sockettest:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//--------创建socket server利用socket.io 模块-------------------


var io = require('socket.io')(server);
io.on('connection', function(item){

  item.emit("welcome","欢迎来到聊天室");

  item.on("all",function(msg){
    console.log("来自客户端的消息-",msg);
    //排除自己，给其他人发消息
    item.broadcast.emit("allchat",msg);
  })
})

//--------创建socket server利用socket.io  模块-------------------

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


//--------创建socket server利用ws 模块-------------------
//

// var WebSocket = require('ws');

// var wss = new WebSocket.Server({ port: 8080 });


// wss.on("connection",function(ws){

//   ws.on("message",function(msg){
//     console.log("来自客户端的消息-",msg);

//     //遍历所有的连接的客户端， 给每个客户端发消息
//     //
//     wss.clients.forEach(function(item){
//       if(item!=ws){ //排除自己
//         item.send(msg);
//       }
      
//     })
//   })
//   ws.send("欢迎来到聊天室"); // socket server 给客户端发的消息
// })
//------------------------------------------------------